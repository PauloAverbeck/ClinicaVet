-- =========================================================
-- H2 SCHEMA for tests (no PL/pgSQL; no triggers de update_date)
-- =========================================================

-- APP_USER
CREATE TABLE IF NOT EXISTS app_user (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version           INTEGER NOT NULL DEFAULT 0,
  creation_date     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  name              VARCHAR(150) NOT NULL,
  email             VARCHAR(254) NOT NULL,
  email_conf_time   TIMESTAMP,
  password_hash     VARCHAR(100) NOT NULL,
  prov_pw_hash      VARCHAR(100),
  reset_token       VARCHAR(100),
  reset_token_expiry TIMESTAMP,

  -- coluna gerada para unicidade case-insensitive
  email_lower VARCHAR(254)
    GENERATED ALWAYS AS (LOWER(email))
);
CREATE UNIQUE INDEX IF NOT EXISTS ux_app_user_email_lower
  ON app_user(email_lower);
CREATE INDEX IF NOT EXISTS index_app_user_reset_token
  ON app_user(reset_token);

-- COMPANY
CREATE TABLE IF NOT EXISTS company (
  id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version        INTEGER NOT NULL DEFAULT 0,
  creation_date  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  name           VARCHAR(150) NOT NULL,
  document_type  VARCHAR(16)  NOT NULL,
  document       VARCHAR(150) NOT NULL,

  CONSTRAINT ck_company_document_type
    CHECK (document_type IN ('CPF','CNPJ','PASSPORT')),
  CONSTRAINT uq_company_document_type
    UNIQUE (document_type, document)
);

-- USER_COMPANY (vínculo usuário–empresa)
CREATE TABLE IF NOT EXISTS user_company (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version            INTEGER NOT NULL DEFAULT 0,
  creation_date      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  created_by_user_id BIGINT,
  user_id            BIGINT NOT NULL,
  company_id         BIGINT NOT NULL,

  admin              BOOLEAN NOT NULL DEFAULT FALSE,
  deleted_at         TIMESTAMP,

  CONSTRAINT uq_user_company UNIQUE (user_id, company_id),

  CONSTRAINT fk_uc_created_by_user
    FOREIGN KEY (created_by_user_id) REFERENCES app_user(id) ON DELETE SET NULL,
  CONSTRAINT fk_uc_user
    FOREIGN KEY (user_id)            REFERENCES app_user(id),
  CONSTRAINT fk_uc_company
    FOREIGN KEY (company_id)         REFERENCES company(id)
);
-- (H2 aceita índices com WHERE, mas para máxima compatibilidade em testes)
CREATE INDEX IF NOT EXISTS idx_user_company_user ON user_company (user_id);
CREATE INDEX IF NOT EXISTS idx_user_company_company ON user_company (company_id);

-- PERSON
CREATE TABLE IF NOT EXISTS person (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version            INTEGER NOT NULL DEFAULT 0,
  creation_date      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  created_by_user_id BIGINT,
  company_id         BIGINT NOT NULL,

  person_type        VARCHAR(16)  NOT NULL,
  document_type      VARCHAR(16),
  document           VARCHAR(150),
  name               VARCHAR(150) NOT NULL,
  phone              VARCHAR(40),
  email              VARCHAR(254),

  cep                VARCHAR(16),
  uf                 VARCHAR(2),
  city               VARCHAR(80),
  district           VARCHAR(80),
  street             VARCHAR(120),
  number             VARCHAR(20),
  complement         VARCHAR(120),

  note               TEXT,

  CONSTRAINT fk_person_created_by
    FOREIGN KEY (created_by_user_id) REFERENCES app_user(id) ON DELETE SET NULL,
  CONSTRAINT fk_person_company
    FOREIGN KEY (company_id)        REFERENCES company(id),

  CONSTRAINT ck_person_person_type
    CHECK (person_type IN ('FISICA','JURIDICA','ESTRANGEIRA')),
  CONSTRAINT ck_person_document_type
    CHECK (document_type IN ('CPF','CNPJ','PASSPORT') OR document_type IS NULL)
);

CREATE INDEX IF NOT EXISTS idx_person_company_doc
  ON person (company_id, document_type, document);
CREATE INDEX IF NOT EXISTS idx_person_company_name
  ON person (company_id, name);

-- ANIMAL
CREATE TABLE IF NOT EXISTS animal (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version            INTEGER NOT NULL DEFAULT 0,
  creation_date      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  tutor_id           BIGINT NOT NULL,
  created_by_user_id BIGINT,

  name               VARCHAR(100) NOT NULL,
  animal_type        VARCHAR(32)  NOT NULL,
  note               TEXT,

  CONSTRAINT fk_animal_tutor
    FOREIGN KEY (tutor_id)           REFERENCES person(id),
  CONSTRAINT fk_animal_created_by
    FOREIGN KEY (created_by_user_id) REFERENCES app_user(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_animal_tutor ON animal (tutor_id);
CREATE INDEX IF NOT EXISTS idx_animal_name  ON animal (name);

-- ATTENDANCE
CREATE TABLE IF NOT EXISTS attendance (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version            INTEGER NOT NULL DEFAULT 0,
  creation_date      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  update_date        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  animal_id          BIGINT NOT NULL,
  created_by_user_id BIGINT,

  scheduled_at       TIMESTAMP,
  appointment_at     TIMESTAMP,
  description        TEXT,

  CONSTRAINT fk_attendance_animal
    FOREIGN KEY (animal_id)          REFERENCES animal(id),
  CONSTRAINT fk_attendance_created_by
    FOREIGN KEY (created_by_user_id) REFERENCES app_user(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_attendance_animal_scheduled
  ON attendance (animal_id, scheduled_at);
CREATE INDEX IF NOT EXISTS idx_attendance_animal_appointment
  ON attendance (animal_id, appointment_at);
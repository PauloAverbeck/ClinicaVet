-- =========================================================
--  FUNCTION: Atualiza automaticamente o campo update_date
-- =========================================================
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date := NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- =========================================================
--  APP_USER
-- =========================================================
CREATE TABLE IF NOT EXISTS app_user (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version         INTEGER NOT NULL DEFAULT 0,
    creation_date   TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date     TIMESTAMP NOT NULL DEFAULT NOW(),

    name            VARCHAR(150) NOT NULL,
    email           VARCHAR(254) NOT NULL,
    email_conf_time TIMESTAMP NULL,
    password_hash   VARCHAR(100) NOT NULL,
    prov_pw_hash    VARCHAR(100) NULL,
    reset_token     VARCHAR(100) NULL,
    reset_token_expiry TIMESTAMP NULL,

    CONSTRAINT pk_app_user PRIMARY KEY (id)
);

-- Índices e unicidades
DROP INDEX IF EXISTS ux_app_user_email_lower;
CREATE UNIQUE INDEX ux_app_user_email_lower ON app_user (LOWER(email));
ALTER TABLE app_user DROP CONSTRAINT IF EXISTS unique_app_user_email;
CREATE INDEX IF NOT EXISTS index_app_user_reset_token ON app_user (reset_token);

DROP TRIGGER IF EXISTS set_app_user_updated_at ON app_user;
CREATE TRIGGER set_app_user_updated_at
BEFORE UPDATE ON app_user
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();


-- =========================================================
--  COMPANY
-- =========================================================
CREATE TABLE IF NOT EXISTS company (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version         INTEGER NOT NULL DEFAULT 0,
    creation_date   TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date     TIMESTAMP NOT NULL DEFAULT NOW(),

    name            VARCHAR(150) NOT NULL,
    document_type   VARCHAR(16)  NOT NULL,
    document        VARCHAR(150) NOT NULL,

    CONSTRAINT pk_company PRIMARY KEY (id),
    CONSTRAINT ck_company_document_type CHECK (document_type IN ('CPF','CNPJ','PASSPORT'))
);

ALTER TABLE company
    DROP CONSTRAINT IF EXISTS unique_company_document;
ALTER TABLE company
    DROP CONSTRAINT IF EXISTS unique_company_document_type;
ALTER TABLE company
    ADD CONSTRAINT unique_company_document_type
    UNIQUE (document_type, document);

DROP TRIGGER IF EXISTS set_company_updated_at ON company;
CREATE TRIGGER set_company_updated_at
BEFORE UPDATE ON company
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();


-- =========================================================
--  USER_COMPANY  (vínculo usuário–empresa)
-- =========================================================
CREATE TABLE IF NOT EXISTS user_company (
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version            INTEGER NOT NULL DEFAULT 0,
    creation_date      TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date        TIMESTAMP NOT NULL DEFAULT NOW(),

    created_by_user_id BIGINT NULL,
    user_id            BIGINT NOT NULL,
    company_id         BIGINT NOT NULL,

    admin              BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at         TIMESTAMP NULL,

    CONSTRAINT pk_user_company PRIMARY KEY (id),
    CONSTRAINT uq_user_company UNIQUE (user_id, company_id),

    CONSTRAINT fk_uc_created_by_user FOREIGN KEY (created_by_user_id)
        REFERENCES app_user(id) ON DELETE SET NULL,
    CONSTRAINT fk_uc_user FOREIGN KEY (user_id)
        REFERENCES app_user(id) ON DELETE RESTRICT,
    CONSTRAINT fk_uc_company FOREIGN KEY (company_id)
        REFERENCES company(id) ON DELETE RESTRICT
);

-- Índices filtrados (ignorando soft-deletes)
CREATE INDEX IF NOT EXISTS idx_user_company_user_active
  ON user_company (user_id) WHERE deleted_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_user_company_company_active
  ON user_company (company_id) WHERE deleted_at IS NULL;

DROP TRIGGER IF EXISTS set_user_company_updated_at ON user_company;
CREATE TRIGGER set_user_company_updated_at
BEFORE UPDATE ON user_company
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();


-- =========================================================
--  PERSON
-- =========================================================
CREATE TABLE IF NOT EXISTS person (
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version            INTEGER NOT NULL DEFAULT 0,
    creation_date      TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date        TIMESTAMP NOT NULL DEFAULT NOW(),

    created_by_user_id BIGINT NULL REFERENCES app_user(id) ON DELETE SET NULL,
    company_id         BIGINT NOT NULL REFERENCES company(id) ON DELETE RESTRICT,

    person_type        VARCHAR(16)  NOT NULL,
    document_type      VARCHAR(16)  NULL,
    document           VARCHAR(150) NULL,
    name               VARCHAR(150) NOT NULL,
    phone              VARCHAR(40)  NULL,
    email              VARCHAR(254) NULL,

    cep                VARCHAR(16)  NULL,
    uf                 VARCHAR(2)   NULL,
    city               VARCHAR(80)  NULL,
    district           VARCHAR(80)  NULL,
    street             VARCHAR(120) NULL,
    number             VARCHAR(20)  NULL,
    complement         VARCHAR(120) NULL,

    note               TEXT         NULL,

    CONSTRAINT ck_person_person_type CHECK (person_type IN ('FISICA','JURIDICA','ESTRANGEIRA')),
    CONSTRAINT ck_person_document_type CHECK (document_type IN ('CPF','CNPJ','PASSPORT') OR document_type IS NULL)
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_person_company_doc
  ON person (company_id, document_type, document)
  WHERE document IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_person_company_name
  ON person (company_id, name);

DROP TRIGGER IF EXISTS set_person_updated_at ON person;
CREATE TRIGGER set_person_updated_at
BEFORE UPDATE ON person
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();


-- =========================================================
--  ANIMAL
-- =========================================================
CREATE TABLE IF NOT EXISTS animal (
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version            INTEGER NOT NULL DEFAULT 0,
    creation_date      TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date        TIMESTAMP NOT NULL DEFAULT NOW(),

    tutor_id           BIGINT NOT NULL REFERENCES person(id) ON DELETE RESTRICT,
    created_by_user_id BIGINT NULL REFERENCES app_user(id) ON DELETE SET NULL,

    name               VARCHAR(100) NOT NULL,
    animal_type        VARCHAR(32)  NOT NULL,
    note               TEXT         NULL
);

CREATE INDEX IF NOT EXISTS idx_animal_tutor ON animal (tutor_id);
CREATE INDEX IF NOT EXISTS idx_animal_name  ON animal (name);

DROP TRIGGER IF EXISTS set_animal_updated_at ON animal;
CREATE TRIGGER set_animal_updated_at
BEFORE UPDATE ON animal
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();


-- =========================================================
--  ATTENDANCE
-- =========================================================
CREATE TABLE IF NOT EXISTS attendance (
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version            INTEGER NOT NULL DEFAULT 0,
    creation_date      TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date        TIMESTAMP NOT NULL DEFAULT NOW(),

    animal_id          BIGINT NOT NULL REFERENCES animal(id) ON DELETE RESTRICT,
    created_by_user_id BIGINT NULL REFERENCES app_user(id) ON DELETE SET NULL,

    scheduled_at       TIMESTAMP NULL,
    appointment_at     TIMESTAMP NULL,
    description        TEXT NULL
);

CREATE INDEX IF NOT EXISTS idx_attendance_animal_time
  ON attendance (animal_id, COALESCE(appointment_at, scheduled_at));

DROP TRIGGER IF EXISTS set_attendance_updated_at ON attendance;
CREATE TRIGGER set_attendance_updated_at
BEFORE UPDATE ON attendance
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();
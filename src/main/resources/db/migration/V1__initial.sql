-- Atualiza update_date
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date := NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- TASK (task)
CREATE TABLE IF NOT EXISTS task (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version         INTEGER NOT NULL DEFAULT 0,
    creation_date   TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date     TIMESTAMP NOT NULL DEFAULT NOW(),

    description     VARCHAR(300) NOT NULL,
    due_date        DATE NULL
    );

CREATE INDEX IF NOT EXISTS index_task_due_date ON task (due_date);
DROP TRIGGER IF EXISTS set_task_updated_at ON task;
CREATE TRIGGER set_task_updated_at
BEFORE UPDATE ON task
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();

-- USERS (app_user)
CREATE TABLE IF NOT EXISTS app_user (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version         INTEGER NOT NULL DEFAULT 0,
    creation_date   TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date     TIMESTAMP NOT NULL DEFAULT NOW(),

    name            VARCHAR(150) NOT NULL,
    email           VARCHAR(254) NOT NULL,
    email_conf_time TIMESTAMP NULL,
    password_hash   VARCHAR(100) NOT NULL,
    prov_pw_hash    VARCHAR(100) NULL,
    CONSTRAINT unique_app_user_email UNIQUE (email)
    );

DROP TRIGGER IF EXISTS set_app_user_updated_at ON app_user;
CREATE TRIGGER set_app_user_updated_at
BEFORE UPDATE ON app_user
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();

-- COMPANY (company)
CREATE TABLE IF NOT EXISTS company (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version         INTEGER NOT NULL DEFAULT 0,
    creation_date   TIMESTAMP NOT NULL DEFAULT NOW(),
    update_date     TIMESTAMP NOT NULL DEFAULT NOW(),

    name            VARCHAR(150) NOT NULL,
    document_type   VARCHAR(150) NOT NULL,
    document        VARCHAR(150) NOT NULL,
    CONSTRAINT unique_company_document UNIQUE (document)
    );

DROP TRIGGER IF EXISTS set_company_updated_at ON company;
CREATE TRIGGER set_company_updated_at
BEFORE UPDATE ON company
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();
